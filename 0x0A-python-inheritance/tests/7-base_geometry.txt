Test cases for 7-base_geometry module

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()

correct test
	>>> bg.integer_validator("my_int", 12)
	>>> bg.integer_validator("width", 89)

Checking for area failure:
	 >>> bg.area()
	 Traceback (most recent call last):
	 ...
	 Exception: area() is not implemented

Checking too many arguments for area:
	 >>> bg.area(1)
	 Traceback (most recent call last):
         ...
	 TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

Checking integer validator for passing integer:
	 >>> bg.integer_validator("age", 1)

Checking for integer == 0:
	 >>> bg.integer_validator("age", 0)
	 Traceback (most recent call last):
         ...
         ValueError: age must be greater than 0

Checking for integer < 0;
	 >>> bg.integer_validator("age", -4)
	 Traceback (most recent call last):
         ...
         ValueError: age must be greater than 0

Checking for non-integer types:
	 >>> bg.integer_validator("bool", True)
	 Traceback (most recent call last):
         ...
         TypeError: bool must be an integer

	 >>> bg.integer_validator("float", 1.5)
         Traceback (most recent call last):
         ...
         TypeError: float must be an integer

	 >>> bg.integer_validator("complex", complex(1, 1))
         Traceback (most recent call last):
         ...
         TypeError: complex must be an integer

	 >>> bg.integer_validator("string", "hello")
         Traceback (most recent call last):
         ...
         TypeError: string must be an integer

	 >>> bg.integer_validator("tuple", (1, 2))
         Traceback (most recent call last):
         ...
         TypeError: tuple must be an integer

	 >>> bg.integer_validator("list", [1, 2, 3])
	 Traceback (most recent call last):
         ...
         TypeError: list must be an integer

	 >>> bg.integer_validator("dict", {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: dict must be an integer

	 >>> bg.integer_validator("set", {"hello", "world"})
         Traceback (most recent call last):
         ...
         TypeError: set must be an integer

	 >>> bg.integer_validator("frozenset", frozenset(["hello", "world"]))
         Traceback (most recent call last):
         ...
         TypeError: frozenset must be an integer

	 >>> bg.integer_validator("bytes", b"bytes")
         Traceback (most recent call last):
         ...
         TypeError: bytes must be an integer

	 >>> bg.integer_validator("bytearrays", bytearray(b"bytes"))
         Traceback (most recent call last):
         ...
         TypeError: bytearrays must be an integer

Checking for no arguments to integer_validator:
	 >>> bg.integer_validator()
	 Traceback (most recent call last):
         ...
	 TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for only 1 argument to integer_validator:
	 >>> bg.integer_validator("integer")
	 Traceback (most recent call last):
         ...
	 TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Checking for too many arguments:
	 >>> bg.integer_validator("integer", 1, 2)
	 Traceback (most recent call last):
         ...
	 TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given
